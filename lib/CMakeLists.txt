# Copyright 2011,2012,2016,2018,2019 Free Software Foundation, Inc.
#
# This file was generated by gr_modtool, a tool from the GNU Radio framework
# This file is a part of gr-legacy_cudaops
#
# SPDX-License-Identifier: GPL-3.0-or-later
#

########################################################################
# Setup library
########################################################################
include(GrPlatform) #define LIB_SUFFIX

############################################################################
#    CUDA Kernels to be compiled with NVCC
############################################################################
find_package(CUDA REQUIRED)
add_library(gnuradio-legacycudaops-cu STATIC 
add.cu
multiply.cu
copy.cu
window.cu
)
set_target_properties(gnuradio-legacycudaops-cu PROPERTIES POSITION_INDEPENDENT_CODE ON)
set_target_properties(gnuradio-legacycudaops-cu PROPERTIES CUDA_SEPARABLE_COMPILATION ON)
target_compile_options(gnuradio-legacycudaops-cu PRIVATE $<$<COMPILE_LANGUAGE:CUDA>:-gencode arch=compute_75,code=sm_75>)
target_compile_options(gnuradio-legacycudaops-cu PRIVATE --default-stream per-thread)


list(APPEND legacy_cudaops_sources
    copy_impl.cc
    cufft_impl.cc
    fft_filter.cc
    fft_filter_ccf_impl.cc
)

set(legacy_cudaops_sources "${legacy_cudaops_sources}" PARENT_SCOPE)
if(NOT legacy_cudaops_sources)
    MESSAGE(STATUS "No C++ sources... skipping lib/")
    return()
endif(NOT legacy_cudaops_sources)

add_library(gnuradio-legacy_cudaops SHARED ${legacy_cudaops_sources})
target_link_libraries(gnuradio-legacy_cudaops PUBLIC 
gnuradio::gnuradio-runtime
gnuradio::gnuradio-fft
${CUDA_CUDA_LIBRARY}   # CUDA Driver API
${CUDA_CUDART_LIBRARY} # CUDA Runtime API
${CUDA_CUFFT_LIBRARIES}
)
target_link_libraries(gnuradio-legacy_cudaops PRIVATE gnuradio-legacycudaops-cu
)
target_include_directories(gnuradio-legacy_cudaops
    PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../include>
    PUBLIC $<INSTALL_INTERFACE:include>
    ${CUDA_INCLUDE_DIRS}
  )
set_target_properties(gnuradio-legacy_cudaops PROPERTIES DEFINE_SYMBOL "gnuradio_legacy_cudaops_EXPORTS")

if(APPLE)
    set_target_properties(gnuradio-legacy_cudaops PROPERTIES
        INSTALL_NAME_DIR "${CMAKE_INSTALL_PREFIX}/lib"
    )
endif(APPLE)

########################################################################
# Install built library files
########################################################################
include(GrMiscUtils)
GR_LIBRARY_FOO(gnuradio-legacy_cudaops)

########################################################################
# Print summary
########################################################################
message(STATUS "Using install prefix: ${CMAKE_INSTALL_PREFIX}")
message(STATUS "Building for version: ${VERSION} / ${LIBVER}")

########################################################################
# Build and register unit test
########################################################################
include(GrTest)

# If your unit tests require special include paths, add them here
#include_directories()
# List all files that contain Boost.UTF unit tests here
list(APPEND test_legacy_cudaops_sources
)
# Anything we need to link to for the unit tests go here
list(APPEND GR_TEST_TARGET_DEPS gnuradio-legacy_cudaops)

if(NOT test_legacy_cudaops_sources)
    MESSAGE(STATUS "No C++ unit tests... skipping")
    return()
endif(NOT test_legacy_cudaops_sources)

foreach(qa_file ${test_legacy_cudaops_sources})
    GR_ADD_CPP_TEST("legacy_cudaops_${qa_file}"
        ${CMAKE_CURRENT_SOURCE_DIR}/${qa_file}
    )
endforeach(qa_file)
