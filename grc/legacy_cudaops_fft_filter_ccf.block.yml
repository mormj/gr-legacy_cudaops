id: cuda_fft_filter_xxx
label: FFT Filter (CUDA)
flags: [ python, cpp ]
category: '[CUDAOPS]'

parameters:
-   id: type
    label: Type
    dtype: enum
    options: [ccc, ccf, fff]
    option_labels: [Complex->Complex (Complex Taps), Complex->Complex (Real Taps),
        Float->Float (Real Taps)]
    option_attributes:
        input: [complex, complex, float]
        output: [complex, complex, float]
        taps: [complex_vector, float_vector, float_vector]
    hide: part
-   id: decim
    label: Decimation
    dtype: int
    default: '1'
-   id: taps
    label: Taps
    dtype: ${ type.taps }
-   id: samp_delay
    label: Sample Delay
    dtype: int
    default: '0'
    hide: part

inputs:
-   domain: stream
    dtype: ${ type.input }

outputs:
-   domain: stream
    dtype: ${ type.output }

templates:
    imports: |-
        import legacy_cudaops
    make: |-
        legacy_cudaops.fft_filter_${type}(${decim}, ${taps})
        self.${id}.declare_sample_delay(${samp_delay})
    callbacks:
    - set_taps(${taps})

cpp_templates:
    includes: ['#include <gnuradio/filter/fft_filter_${type}.h>']
    declarations: 'filter::fft_filter_${type}::sptr ${id};'
    make: |-
        % if str(type.taps) == "complex_vector":
        std::vector<gr_complex> taps = {${str(taps)[1:-1]}};
        % else:
        std::vector<float> taps = {${str(taps)[1:-1]}};
        % endif
        this->${id} = filter::fft_filter_${type}::make(
            ${decim}, 
            taps,
            ${nthreads});
        this->${id}.declare_sample_delay(${samp_delay});
    link: ['gnuradio-filter']
    callbacks:
    - set_taps(taps)

file_format: 1
